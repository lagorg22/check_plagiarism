#include <iostream>
#include <vector>
#include <random>
#include <ctime>

class Particle {
public:
    double x, y;
    double velocity_x, velocity_y;

    Particle(double start_x, double start_y) : x(start_x), y(start_y) {
        std::random_device rd;
        std::mt19937 gen(rd());
        std::uniform_real_distribution<> distrib(-1.0, 1.0);
        velocity_x = distrib(gen) * 0.5;
        velocity_y = distrib(gen) * 0.5;
    }

    void update(double delta_time) {
        x += velocity_x * delta_time;
        y += velocity_y * delta_time;

        // Simple boundary conditions (bounce off edges)
        if (x < -10 || x > 10) velocity_x *= -1;
        if (y < -10 || y > 10) velocity_y *= -1;
    }

    void display() const {
        std::cout << "Position: (" << x << ", " << y << ")" << std::endl;
    }
};

int main() {
    std::srand(std::time(nullptr));
    std::vector<Particle> particles;
    int num_particles = 5;
    for (int i = 0; i < num_particles; ++i) {
        particles.emplace_back(std::rand() % 20 - 10, std::rand() % 20 - 10);
    }

    double time = 0.0;
    double time_step = 0.1;
    int steps = 50;

    std::cout << "--- Particle Simulation ---" << std::endl;
    for (int i = 0; i < steps; ++i) {
        std::cout << "\nTime: " << time << std::endl;
        for (auto& particle : particles) {
            particle.update(time_step);
            particle.display();
        }
        time += time_step;
    }

    return 0;
}