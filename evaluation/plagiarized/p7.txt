from django.db import models
from django.contrib.auth.models import User
from products.models import Product
from decimal import Decimal

class Sale(models.Model):
    """
    A record of a user's purchase transaction.
    """
    STATES = [
        ('PENDING', 'Pending'),
        ('PROGRESS', 'Progress'),
        ('SENT', 'Sent'),
        ('DONE', 'Done'),
        ('CANCEL', 'Cancel'),
    ]

    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name='sales')
    name = models.CharField(max_length=100)
    location = models.TextField()
    phone = models.CharField(max_length=20)
    email = models.EmailField()
    state = models.CharField(max_length=20, choices=STATES, default='PENDING')
    total = models.DecimalField(max_digits=10, decimal_places=2)
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Sale #{self.id} - {self.owner.username}"

    def calc_total(self):
        value = Decimal('0.00')
        for entry in self.entries.all():
            value += entry.cost * entry.qty
        self.total = value
        self.save()
        return value

    class Meta:
        ordering = ['-created']


class SaleEntry(models.Model):
    """
    A product and its quantity in a Sale.
    """
    sale = models.ForeignKey(Sale, on_delete=models.CASCADE, related_name='entries')
    item = models.ForeignKey(Product, on_delete=models.PROTECT)
    qty = models.PositiveIntegerField(default=1)
    cost = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return f"{self.qty} Ã— {self.item.name} (Sale #{self.sale.id})"

    class Meta:
        ordering = ['sale', 'id']
