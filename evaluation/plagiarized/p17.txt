const isDevHost = Boolean(
  window.location.hostname === 'localhost' ||
  window.location.hostname === '[::1]' ||
  /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/.test(window.location.hostname)
);

export function registerService(config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;
    const swOrigin = new URL(process.env.PUBLIC_URL, window.location.href).origin;

    if (swOrigin !== window.location.origin) return;

    window.addEventListener('load', () => {
      isDevHost ? validateSW(swUrl, config) : activateSW(swUrl, config);
    });
  }
}

function activateSW(url, config) {
  navigator.serviceWorker
    .register(url)
    .then(reg => {
      reg.onupdatefound = () => {
        const sw = reg.installing;
        if (!sw) return;

        sw.onstatechange = () => {
          if (sw.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              console.log("New content available; it'll be used once all tabs are closed.");
              config?.onUpdate?.(reg);
            } else {
              console.log('App content cached for offline use.');
              config?.onSuccess?.(reg);
            }
          }
        };
      };
    })
    .catch(err => console.error('SW registration error:', err));
}

function validateSW(url, config) {
  fetch(url, { headers: { 'Service-Worker': 'script' } })
    .then(res => {
      const isJS = res.headers.get('content-type')?.includes('javascript');
      if (res.status === 404 || !isJS) {
        navigator.serviceWorker.ready.then(r => {
          r.unregister().then(() => window.location.reload());
        });
      } else {
        activateSW(url, config);
      }
    })
    .catch(() => console.log('Offline mode detected.'));
}

export function unregisterServiceWorker() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then(reg => reg.unregister())
      .catch(err => console.error(err.message));
  }
}
