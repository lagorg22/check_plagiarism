const isLocal = ['localhost', '[::1]'].includes(window.location.hostname) ||
  /^127(?:\.(?:\d{1,3})){3}$/.test(window.location.hostname);

export function initServiceWorker(config) {
  if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {
    const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;
    const swOrigin = new URL(process.env.PUBLIC_URL, window.location.href).origin;

    if (swOrigin !== window.location.origin) return;

    window.addEventListener('load', () => {
      isLocal ? checkSW(swUrl, config) : installSW(swUrl, config);
    });
  }
}

function installSW(url, config) {
  navigator.serviceWorker.register(url).then(registration => {
    registration.onupdatefound = () => {
      const worker = registration.installing;
      if (!worker) return;

      worker.onstatechange = () => {
        if (worker.state === 'installed') {
          const controllerExists = navigator.serviceWorker.controller;

          if (controllerExists) {
            console.info('New content available; update when tabs close.');
            config?.onUpdate?.(registration);
          } else {
            console.info('Content cached for offline usage.');
            config?.onSuccess?.(registration);
          }
        }
      };
    };
  }).catch(err => console.error('ServiceWorker registration failed:', err));
}

function checkSW(url, config) {
  fetch(url, { headers: { 'Service-Worker': 'script' } })
    .then(res => {
      const isValidJS = res.headers.get('content-type')?.includes('javascript');
      if (res.status === 404 || !isValidJS) {
        navigator.serviceWorker.ready
          .then(reg => reg.unregister().then(() => window.location.reload()));
      } else {
        installSW(url, config);
      }
    })
    .catch(() => console.warn('Running in offline mode.'));
}

export function removeServiceWorker() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then(reg => reg.unregister())
      .catch(err => console.error('Unregister failed:', err));
  }
}
