const isRunningLocally =
  ['localhost', '[::1]'].includes(window.location.hostname) ||
  /^127(\.\d{1,3}){3}$/.test(window.location.hostname);

export function setupServiceWorker(config) {
  if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {
    const swPath = `${process.env.PUBLIC_URL}/service-worker.js`;
    const currentOrigin = new URL(process.env.PUBLIC_URL, window.location.href).origin;

    if (currentOrigin !== window.location.origin) return;

    window.addEventListener('load', () => {
      isRunningLocally ? verifyServiceWorker(swPath, config) : registerWorker(swPath, config);
    });
  }
}

const registerWorker = (swUrl, config) => {
  navigator.serviceWorker
    .register(swUrl)
    .then(registration => {
      registration.onupdatefound = () => {
        const sw = registration.installing;
        if (!sw) return;

        sw.onstatechange = () => {
          if (sw.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              console.log('New version available. It will load when all tabs close.');
              config?.onUpdate?.(registration);
            } else {
              console.log('App is cached for offline use.');
              config?.onSuccess?.(registration);
            }
          }
        };
      };
    })
    .catch(err => console.error('Service worker error:', err));
};

const verifyServiceWorker = (swUrl, config) => {
  fetch(swUrl, { headers: { 'Service-Worker': 'script' } })
    .then(response => {
      const contentType = response.headers.get('content-type') || '';
      if (response.status === 404 || !contentType.includes('javascript')) {
        navigator.serviceWorker.ready.then(reg =>
          reg.unregister().then(() => window.location.reload())
        );
      } else {
        registerWorker(swUrl, config);
      }
    })
    .catch(() => console.warn('App is offline.'));
};

export const unregisterSW = () => {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then(reg => reg.unregister())
      .catch(err => console.error(err));
  }
};
